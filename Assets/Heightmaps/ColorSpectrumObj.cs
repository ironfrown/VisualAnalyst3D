//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Linq;
using UnityEngine;
public class ColorSpectrumObj
{
	public const String PRESET_RGBW = "RGBW";
	public const String PRESET_WBGR = "WBGR";
	public const String PRESET_PiPuDbDg = "PiPuDbDg";
	public const String PRESET_GWR = "GWR";
	public const String PRESET_GOGH_GREEN = "GoghGreen";
	public const String PRESET_YELLOW_TO_BLUE = "YellowToBlue";
	public const String PRESET_BLUE_TO_YELLOW_SOFT = "BlueToYellowSoft";

	public const String PRESET_BLUE_TO_YELLOW = "BlueToYellow";
	public const String PRESET_BLUE_TO_YELLOW_NEEDLES = "BlueToYellowNeedles";

	Color[] colors;
	float[] prop;
	public ColorSpectrumObj (Color[] colors, float[] proportions)
	{
		this.colors = colors;
		this.prop = proportions;
	}

	public ColorSpectrumObj(String preset) 
	{
		switch(preset){ 
		case PRESET_RGBW:
			colors = new Color[]{Color.clear, Color.red, Color.green, Color.blue, Color.white};
			prop = new float[]{0.0f, 0.25f, 0.5f, 0.75f, 1f};
			break;

		case PRESET_WBGR:
			colors = new Color[]{Color.clear, Color.white, Color.blue, Color.green, Color.red};
			prop = new float[]{0.0f, 0.25f, 0.5f, 0.75f, 1f};
			break;

		case PRESET_GWR:
			colors = new Color[]{Color.clear, Color.green, Color.white, Color.red};
			prop = new float[]{0.0f, 0.33f, 0.67f, 1f};
			break;

		case PRESET_PiPuDbDg:
			colors = new Color[]{Color.clear, 
				new Color(1f, 0.4f, 1f),
				new Color(0.6f, 0f, 0.6f), 
				new Color(0.4f, 0f, 0.8f),
				new Color(0f, 0f, 0.6f),
				new Color(0f, 0.2f, 0.4f)};
			prop = new float[]{0.0f, 0.2f, 0.5f, 0.7f, 0.9f, 1f};
			break;

		case PRESET_GOGH_GREEN:
			colors = new Color[]{Color.clear, 
				new Color(48f/255f, 48f/255f, 48f/255f),
				new Color(121f/255f, 144f/255f, 76f/255f),
				new Color(143f/255f, 167f/255f, 71f/255f),
				new Color(193f/255f, 145f/255f, 73f/255f),
				new Color(239f/255f, 189f/255f, 68f/255f)
			};
			prop = new float[]{0.0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f};
			break;

		case PRESET_YELLOW_TO_BLUE:
			colors = new Color[]{Color.clear, 
				Color.yellow,
				Color.Lerp(Color.yellow, Color.red, 0.5f),
				Color.red,
				Color.Lerp(Color.red, Color.blue, 0.5f),
				Color.blue
			};
			prop = new float[]{0.0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f};
			break;

		case PRESET_BLUE_TO_YELLOW:
			colors = new Color[]{new Color(4f/255f, 4f/255f, 42f/255f), 
				Color.blue,
				Color.Lerp(Color.red, Color.blue, 0.5f),
				Color.red,
				Color.Lerp(Color.yellow, Color.red, 0.5f),
				Color.yellow
			};
			prop = new float[]{0.0f, 0.3f, 0.6f, 0.7f, 0.8f, 1f};
			break;

		case PRESET_BLUE_TO_YELLOW_NEEDLES:
			colors = new Color[]{new Color(4f/255f, 4f/255f, 42f/255f), 
				Color.blue,
				Color.Lerp(Color.red, Color.blue, 0.5f),
				Color.red,
				Color.Lerp(Color.yellow, Color.red, 0.5f),
				Color.yellow
			};
			prop = new float[]{0.0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f};
			break;

		case PRESET_BLUE_TO_YELLOW_SOFT:
			colors = new Color[]{new Color(124f/255f, 174f/255f, 207f/255f),//Color.cyan, 
				new Color(95f/255f, 103f/255f, 152f/255f),//Color.Lerp(Color.cyan, Color.blue, 0.5f),
//				Color.blue, 
				new Color(147f/255f, 65f/255f, 82f/255f),//Color.Lerp(Color.red, Color.blue, 0.5f),
				Color.red,//new Color(243f/255f, 158f/255f, 163f/255f),//Color.red,
				Color.Lerp(Color.yellow, Color.red, 0.5f),//new Color(236f/255f, 201f/255f, 167f/255f),//Color.Lerp(Color.yellow, Color.red, 0.5f),
				Color.yellow//new Color(248f/255f, 227f/255f, 110f/255f),//Color.yellow 
			};
			prop = new float[]{0.0f, 0.2f, 0.4f, 0.6f, 0.8f, 0.9f, 1f};
			break;
		}
	}

	/// <summary>
	/// Gets the color from the specified color spectrum object when supplied
	/// with a float value between 0 and 1.
	/// </summary>
	/// <returns>The color represented by the given value in the current 
	/// color spectrum object.</returns>
	/// <param name="val">Value.</param>
	public Color GetColorFromVal(float val)
	{
		for(int i=0; i<prop.Length; i++){
			if(val < prop[i]){
					if(i == 0){
						float ratio = val/prop[i];
	//					Color c = Color.Lerp(new Color(4f/255f, 4f/255f, 42f/255f), colors[i], ratio);
						Color c = colors[0];
						return c;
					}
					else
					{
						float ratio = (val-prop[i-1])/(prop[i]-prop[i-1]);
						Color c = Color.Lerp(colors[i-1], colors[i], ratio);
						return c;
					}
				}
				if(val > 1.0f) //Value is higher than the highest colour
				{
					Color c = colors[colors.GetUpperBound(0)]; //Set to highest colour
					return c;
				}

		}
		// Worst case scenario, nothing is found and WHITE is returned
		return Color.white;
	}
}